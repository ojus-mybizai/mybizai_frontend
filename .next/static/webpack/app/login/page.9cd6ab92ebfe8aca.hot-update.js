"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/login/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiError: function() { return /* binding */ ApiError; },\n/* harmony export */   aiConfigApi: function() { return /* binding */ aiConfigApi; },\n/* harmony export */   authApi: function() { return /* binding */ authApi; },\n/* harmony export */   channelsApi: function() { return /* binding */ channelsApi; },\n/* harmony export */   chatAgentApi: function() { return /* binding */ chatAgentApi; },\n/* harmony export */   convoApi: function() { return /* binding */ convoApi; },\n/* harmony export */   crmApi: function() { return /* binding */ crmApi; },\n/* harmony export */   dashboardApi: function() { return /* binding */ dashboardApi; },\n/* harmony export */   integrationApi: function() { return /* binding */ integrationApi; },\n/* harmony export */   knowledgeBaseApi: function() { return /* binding */ knowledgeBaseApi; },\n/* harmony export */   toolsApi: function() { return /* binding */ toolsApi; }\n/* harmony export */ });\nconst API_BASE_URL = \"http://localhost:8000/api/v1\" || 0;\nclass ApiError extends Error {\n    constructor(status, message, details){\n        super(message);\n        this.status = status;\n        this.details = details;\n        this.name = \"ApiError\";\n    }\n}\nasync function apiRequest(endpoint) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const url = \"\".concat(API_BASE_URL).concat(endpoint);\n    const headers = {\n        ...options.headers || {}\n    };\n    // Only set JSON content-type if body is not FormData or URLSearchParams\n    if (options.body && !(options.body instanceof FormData) && !(options.body instanceof URLSearchParams)) {\n        headers[\"Content-Type\"] = \"application/json\";\n    }\n    const config = {\n        ...options,\n        headers\n    };\n    try {\n        var _options_headers;\n        // Add detailed logging for debugging\n        console.log(\"\\uD83D\\uDD04 API REQUEST:\", {\n            url,\n            method: options.method || \"GET\",\n            headers: {\n                ...headers,\n                ...((_options_headers = options.headers) === null || _options_headers === void 0 ? void 0 : _options_headers.Authorization) ? {\n                    Authorization: \"Bearer [HIDDEN]\"\n                } : {}\n            },\n            body: options.body ? options.body instanceof FormData ? \"FormData\" : options.body : undefined\n        });\n        const response = await fetch(url, config);\n        // Log response details\n        console.log(\"\\uD83D\\uDCE5 API RESPONSE:\", {\n            status: response.status,\n            statusText: response.statusText,\n            headers: Object.fromEntries(response.headers.entries())\n        });\n        if (!response.ok) {\n            // 🚨 CRITICAL: Handle 401 Unauthorized globally\n            if (response.status === 401) {\n                // Clear invalid token and redirect to login\n                if (true) {\n                    localStorage.removeItem(\"access_token\");\n                    // Force redirect to login\n                    window.location.href = \"/login\";\n                }\n                throw new ApiError(response.status, \"Session expired. Please log in again.\", \"auth_expired\");\n            }\n            let errorMessage = \"HTTP error! status: \".concat(response.status);\n            let errorDetails = null;\n            try {\n                const errorData = await response.json();\n                console.log(\"❌ API ERROR RESPONSE BODY:\", errorData);\n                if (errorData.success === false && errorData.error) {\n                    // Backend error format: { success: false, error: { code, message, details } }\n                    errorMessage = errorData.error.message;\n                    errorDetails = errorData.error.details;\n                } else {\n                    // Fallback for other error formats\n                    errorMessage = errorData.detail || errorData.message || errorMessage;\n                }\n            } catch (e) {\n                // If JSON parsing fails, use status text\n                errorMessage = response.statusText || errorMessage;\n            }\n            throw new ApiError(response.status, errorMessage, errorDetails);\n        }\n        // Handle 204 No Content\n        if (response.status === 204) {\n            return null;\n        }\n        const responseData = await response.json();\n        console.log(\"✅ API SUCCESS RESPONSE:\", responseData);\n        return responseData;\n    } catch (error) {\n        if (error instanceof ApiError) {\n            throw error;\n        }\n        throw new ApiError(0, \"Network error or server unavailable\");\n    }\n}\nconst authApi = {\n    login: async (credentials)=>{\n        try {\n            const response = await apiRequest(\"/auth/login\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(credentials)\n            });\n            console.log(\"✅ API LOGIN SUCCESS RESPONSE:\", response);\n            // Check if this is an UnverifiedUserResponse (no access_token)\n            if (\"verification_required\" in response.data && response.data.verification_required) {\n                // This is an unverified user response - return to be handled by caller\n                return response.data;\n            }\n            // At this point, response must be a LoginResponse (successful login)\n            return response.data;\n        } catch (error) {\n            if (error instanceof ApiError) {\n                throw error;\n            }\n            // Handle network errors or other issues\n            throw new ApiError(0, \"Login failed. Please check your credentials and try again.\");\n        }\n    },\n    signup: async (userData)=>{\n        return apiRequest(\"/auth/signup\", {\n            method: \"POST\",\n            body: JSON.stringify(userData)\n        });\n    },\n    verifyEmail: async (data)=>{\n        return apiRequest(\"/auth/verify-email\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    resendOTP: async (userId)=>{\n        return apiRequest(\"/auth/resend-otp\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                user_id: userId\n            })\n        });\n    },\n    getMe: async (token)=>{\n        return apiRequest(\"/auth/users/me\", {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    businessOnboarding: async (data, token)=>{\n        console.log(\"\\uD83C\\uDFE2 BUSINESS ONBOARDING API CALL:\");\n        console.log(\"\\uD83D\\uDCE4 Sending to:\", \"/business/onboarding\");\n        console.log(\"\\uD83D\\uDCCB Data:\", data);\n        console.log(\"\\uD83D\\uDD11 Token:\", token ? \"Bearer [PROVIDED]\" : \"MISSING\");\n        const result = await apiRequest(\"/business/onboarding\", {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n        console.log(\"\\uD83D\\uDCE8 BUSINESS ONBOARDING RESPONSE:\", result);\n        return result;\n    },\n    // Get current business\n    getCurrentBusiness: async (token)=>{\n        return apiRequest(\"/business/me\", {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    // Update current business\n    updateCurrentBusiness: async (data, token)=>{\n        return apiRequest(\"/business/me\", {\n            method: \"PUT\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    // Catalog API endpoints\n    getCatalogItems: async (token, params)=>{\n        const qs = params ? \"?\" + new URLSearchParams(Object.entries(params).reduce((acc, param)=>{\n            let [k, v] = param;\n            if (v !== undefined && v !== null && v !== \"\") acc[k] = String(v);\n            return acc;\n        }, {})).toString() : \"\";\n        return apiRequest(\"/catalog/\".concat(qs), {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    getCatalogItem: async (id, token)=>{\n        return apiRequest(\"/catalog/\".concat(id), {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    createCatalogItem: async (data, token)=>{\n        return apiRequest(\"/catalog/\", {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    updateCatalogItem: async (id, data, token)=>{\n        return apiRequest(\"/catalog/\".concat(id), {\n            method: \"PUT\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    deleteCatalogItem: async (id, token)=>{\n        return apiRequest(\"/catalog/\".concat(id), {\n            method: \"DELETE\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    toggleCatalogItemAvailability: async (id, availability, token)=>{\n        return apiRequest(\"/catalog/\".concat(id, \"/availability\"), {\n            method: \"PATCH\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify({\n                availability\n            })\n        });\n    },\n    // Upload image to get URL\n    uploadCatalogImage: async (file, token)=>{\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        return apiRequest(\"/catalog/upload-image\", {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: formData\n        });\n    },\n    // Create item with multipart (extra_data JSON string + optional image)\n    createCatalogItemWithImage: async (data, token)=>{\n        const formData = new FormData();\n        formData.append(\"name\", data.name);\n        if (data.description) formData.append(\"description\", String(data.description));\n        if (data.category) formData.append(\"category\", String(data.category));\n        formData.append(\"price\", String(data.price));\n        if (data.currency) formData.append(\"currency\", String(data.currency));\n        if (data.availability) formData.append(\"availability\", String(data.availability));\n        if (data.type) formData.append(\"type\", String(data.type));\n        if (data.template_id !== undefined && data.template_id !== null) formData.append(\"template_id\", String(data.template_id));\n        formData.append(\"extra_data\", JSON.stringify(data.extra_data));\n        if (data.image) formData.append(\"image\", data.image);\n        return apiRequest(\"/catalog/with-image\", {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: formData\n        });\n    },\n    // Categories list\n    getCatalogCategories: async (token)=>{\n        return apiRequest(\"/catalog/categories/list\", {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    // Stats summary\n    getCatalogStatsSummary: async (token)=>{\n        return apiRequest(\"/catalog/stats/summary\", {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    // Catalog Templates API\n    getCatalogTemplates: async (token)=>{\n        return apiRequest(\"/catalog/templates\", {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    getCatalogTemplate: async (id, token)=>{\n        return apiRequest(\"/catalog/templates/\".concat(id), {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    createCatalogTemplate: async (data, token)=>{\n        return apiRequest(\"/catalog/templates\", {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    updateCatalogTemplate: async (id, data, token)=>{\n        return apiRequest(\"/catalog/templates/\".concat(id), {\n            method: \"PUT\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    deleteCatalogTemplate: async (id, token)=>{\n        return apiRequest(\"/catalog/templates/\".concat(id), {\n            method: \"DELETE\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    // Bulk Upload API\n    bulkUploadCatalog: async (file, fieldMapping, token)=>{\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        formData.append(\"field_mapping\", JSON.stringify(fieldMapping));\n        return apiRequest(\"/catalog/bulk-upload\", {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: formData\n        });\n    }\n};\n// CRM API Client\nconst crmApi = {\n    // Contacts API\n    getContacts: async (token, params)=>{\n        const qs = params ? \"?\" + new URLSearchParams(Object.entries(params).reduce((acc, param)=>{\n            let [k, v] = param;\n            if (v !== undefined && v !== null && v !== \"\") acc[k] = String(v);\n            return acc;\n        }, {})).toString() : \"\";\n        return apiRequest(\"/contacts/\".concat(qs), {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    getContact: async (id, token)=>{\n        return apiRequest(\"/contacts/\".concat(id), {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    createContact: async (data, token)=>{\n        return apiRequest(\"/contacts/\", {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    updateContact: async (id, data, token)=>{\n        return apiRequest(\"/contacts/\".concat(id), {\n            method: \"PUT\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    deleteContact: async (id, token)=>{\n        return apiRequest(\"/contacts/\".concat(id), {\n            method: \"DELETE\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    // Leads API\n    getLeads: async (token, params)=>{\n        const qs = params ? \"?\" + new URLSearchParams(Object.entries(params).reduce((acc, param)=>{\n            let [k, v] = param;\n            if (v !== undefined && v !== null && v !== \"\") acc[k] = String(v);\n            return acc;\n        }, {})).toString() : \"\";\n        return apiRequest(\"/leads/\".concat(qs), {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    getLead: async (id, token)=>{\n        return apiRequest(\"/leads/\".concat(id), {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    createLead: async (data, token)=>{\n        return apiRequest(\"/leads/\", {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    updateLead: async (id, data, token)=>{\n        return apiRequest(\"/leads/\".concat(id), {\n            method: \"PUT\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    deleteLead: async (id, token)=>{\n        return apiRequest(\"/leads/\".concat(id), {\n            method: \"DELETE\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    getLeadStats: async (token)=>{\n        return apiRequest(\"/leads/stats/summary\", {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    }\n};\n// ChatAgent API Client\nconst chatAgentApi = {\n    getChatAgents: async (token)=>{\n        return apiRequest(\"/chat_agents/\", {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    getChatAgent: async (id, token)=>{\n        return apiRequest(\"/chat_agents/\".concat(id), {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    createChatAgent: async (data, token)=>{\n        return apiRequest(\"/chat_agents/\", {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    updateChatAgent: async (id, data, token)=>{\n        return apiRequest(\"/chat_agents/\".concat(id), {\n            method: \"PUT\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    deleteChatAgent: async (id, token)=>{\n        return apiRequest(\"/chat_agents/\".concat(id), {\n            method: \"DELETE\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    // Get knowledge bases linked to a chat agent\n    getChatAgentKnowledgeBases: async (id, token)=>{\n        return apiRequest(\"/chat_agents/\".concat(id, \"/knowledge_bases\"), {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    // Bulk link/unlink knowledge bases to/from a chat agent\n    updateChatAgentKnowledgeBases: async (id, data, token)=>{\n        return apiRequest(\"/chat_agents/\".concat(id, \"/knowledge_bases\"), {\n            method: \"PUT\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    // Get channels linked to a chat agent\n    getChatAgentChannels: async (id, token)=>{\n        return apiRequest(\"/chat_agents/\".concat(id, \"/channels\"), {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    // Bulk link/unlink channels to/from a chat agent\n    updateChatAgentChannels: async (id, data, token)=>{\n        return apiRequest(\"/chat_agents/\".concat(id, \"/channels\"), {\n            method: \"PUT\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    // Get tools linked to a chat agent\n    getChatAgentTools: async (id, token)=>{\n        return apiRequest(\"/chat_agents/\".concat(id, \"/tools\"), {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    // Bulk link/unlink tools to/from a chat agent\n    updateChatAgentTools: async (id, data, token)=>{\n        return apiRequest(\"/chat_agents/\".concat(id, \"/tools\"), {\n            method: \"PUT\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    // Send test message to chat agent\n    testChatAgent: async (id, data, token)=>{\n        return apiRequest(\"/chat_agents/\".concat(id, \"/test\"), {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    // Deploy chat agent\n    deployChatAgent: async (id, token)=>{\n        return apiRequest(\"/chat_agents/\".concat(id, \"/deploy\"), {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    }\n};\n// Knowledge Base API Client\nconst knowledgeBaseApi = {\n    getKnowledgeBases: async (token)=>{\n        const res = await apiRequest(\"/knowledge_base/\", {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n        console.log(\"response from backendS\", res);\n        return res;\n    },\n    getKnowledgeBase: async (id, token)=>{\n        return apiRequest(\"/knowledge_base/\".concat(id), {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    createKnowledgeBase: async (data, token)=>{\n        if (data.file) {\n            const formData = new FormData();\n            formData.append(\"title\", data.title);\n            if (data.category) formData.append(\"category\", data.category);\n            formData.append(\"file\", data.file);\n            return apiRequest(\"/knowledge_base/upload\", {\n                method: \"POST\",\n                headers: {\n                    Authorization: \"Bearer \".concat(token)\n                },\n                body: formData\n            });\n        } else {\n            return apiRequest(\"/knowledge_base/\", {\n                method: \"POST\",\n                headers: {\n                    Authorization: \"Bearer \".concat(token)\n                },\n                body: JSON.stringify(data)\n            });\n        }\n    },\n    updateKnowledgeBase: async (id, data, token)=>{\n        return apiRequest(\"/knowledge_base/\".concat(id), {\n            method: \"PUT\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    deleteKnowledgeBase: async (id, token)=>{\n        return apiRequest(\"/knowledge_base/\".concat(id), {\n            method: \"DELETE\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    }\n};\nconst channelsApi = {\n    getChannels: async (token)=>{\n        return apiRequest(\"/channels/\", {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    getChannel: async (id, token)=>{\n        return apiRequest(\"/channels/\".concat(id), {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    createChannel: async (data, token)=>{\n        return apiRequest(\"/channels/\", {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    updateChannel: async (id, data, token)=>{\n        return apiRequest(\"/channels/\".concat(id), {\n            method: \"PUT\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    deleteChannel: async (id, token)=>{\n        return apiRequest(\"/channels/\".concat(id), {\n            method: \"DELETE\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    }\n};\n// Integration API Client\nconst integrationApi = {\n    getIntegrations: async (token)=>{\n        return apiRequest(\"/business_integrations/\", {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    getIntegration: async (id, token)=>{\n        return apiRequest(\"/business_integrations/\".concat(id), {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    createIntegration: async (data, token)=>{\n        return apiRequest(\"/business_integrations/\", {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    updateIntegration: async (id, data, token)=>{\n        return apiRequest(\"/business_integrations/\".concat(id), {\n            method: \"PUT\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    deleteIntegration: async (id, token)=>{\n        return apiRequest(\"/business_integrations/\".concat(id), {\n            method: \"DELETE\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    }\n};\n// AI Config API Client\nconst aiConfigApi = {\n    getAIConfigs: async (token)=>{\n        return apiRequest(\"/ai_configs/\", {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    getAIConfig: async (id, token)=>{\n        return apiRequest(\"/ai_configs/\".concat(id), {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    createAIConfig: async (data, token)=>{\n        return apiRequest(\"/ai_configs/\", {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    updateAIConfig: async (id, data, token)=>{\n        return apiRequest(\"/ai_configs/\".concat(id), {\n            method: \"PUT\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    deleteAIConfig: async (id, token)=>{\n        return apiRequest(\"/ai_configs/\".concat(id), {\n            method: \"DELETE\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    }\n};\n// Dashboard API Client\nconst dashboardApi = {\n    getStats: async (token)=>{\n        return apiRequest(\"/dashboard/stats\", {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    }\n};\nconst toolsApi = {\n    getTools: async (token)=>{\n        return apiRequest(\"/tools/\", {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    getTool: async (id, token)=>{\n        return apiRequest(\"/tools/\".concat(id), {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    createTool: async (data, token)=>{\n        return apiRequest(\"/tools/\", {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    updateTool: async (id, data, token)=>{\n        return apiRequest(\"/tools/\".concat(id), {\n            method: \"PUT\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    deleteTool: async (id, token)=>{\n        return apiRequest(\"/tools/\".concat(id), {\n            method: \"DELETE\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    }\n};\n// Conversation API Client\nconst convoApi = {\n    // List conversations with pagination\n    getConversations: async (token, params)=>{\n        const queryParams = params ? \"?\" + new URLSearchParams(Object.entries(params).reduce((acc, param)=>{\n            let [k, v] = param;\n            if (v !== undefined && v !== null) acc[k] = String(v);\n            return acc;\n        }, {})).toString() : \"\";\n        return apiRequest(\"/convo/\".concat(queryParams), {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    // Create a new conversation\n    createConversation: async (data, token)=>{\n        return apiRequest(\"/convo/\", {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    // Get a specific conversation\n    getConversation: async (convoId, token)=>{\n        return apiRequest(\"/convo/\".concat(convoId), {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    // Update conversation details\n    updateConversation: async (convoId, data, token)=>{\n        return apiRequest(\"/convo/\".concat(convoId), {\n            method: \"PUT\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    // Delete a conversation\n    deleteConversation: async (convoId, token)=>{\n        return apiRequest(\"/convo/\".concat(convoId), {\n            method: \"DELETE\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    },\n    // Add a message to conversation\n    addMessage: async (convoId, data, token)=>{\n        return apiRequest(\"/convo/\".concat(convoId, \"/messages\"), {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    // Update conversation summary\n    updateSummary: async (convoId, data, token)=>{\n        return apiRequest(\"/convo/\".concat(convoId, \"/summary\"), {\n            method: \"PUT\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    // Get conversation messages (if endpoint exists)\n    getConversationMessages: async (convoId, token, params)=>{\n        const queryParams = params ? \"?\" + new URLSearchParams(Object.entries(params).reduce((acc, param)=>{\n            let [k, v] = param;\n            if (v !== undefined && v !== null) acc[k] = String(v);\n            return acc;\n        }, {})).toString() : \"\";\n        return apiRequest(\"/convo/\".concat(convoId, \"/messages\").concat(queryParams), {\n            method: \"GET\",\n            headers: {\n                Authorization: \"Bearer \".concat(token)\n            }\n        });\n    }\n};\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});