"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./app/globals.css":
/*!*************************!*\
  !*** ./app/globals.css ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"3789672ca6fb\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9nbG9iYWxzLmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2dsb2JhbHMuY3NzPzA3ZGUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIzNzg5NjcyY2E2ZmJcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/apiClient.ts":
/*!**************************!*\
  !*** ./lib/apiClient.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiError: function() { return /* binding */ ApiError; },\n/* harmony export */   apiClient: function() { return /* binding */ apiClient; },\n/* harmony export */   parseApiError: function() { return /* binding */ parseApiError; }\n/* harmony export */ });\nconst API_BASE_URL = \"http://localhost:8000/api/v1\" || 0;\n// Custom API Error class\nclass ApiError extends Error {\n    constructor(status, message, code, details){\n        super(message);\n        this.status = status;\n        this.code = code;\n        this.details = details;\n        this.name = \"ApiError\";\n    }\n}\nclass ApiClient {\n    async request(method, endpoint, data) {\n        let isFormData = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;\n        const url = \"\".concat(API_BASE_URL).concat(endpoint);\n        const token =  true ? localStorage.getItem(\"access_token\") : 0;\n        const headers = {};\n        if (!isFormData && !(data instanceof FormData)) {\n            headers[\"Content-Type\"] = \"application/json\";\n        } else if (isFormData || data instanceof FormData) {\n        // Don't set Content-Type for FormData - browser sets boundary automatically\n        // headers['Content-Type'] = 'multipart/form-data'; // Let browser set this\n        }\n        if (token) {\n            headers[\"Authorization\"] = \"Bearer \".concat(token);\n        }\n        const config = {\n            method,\n            headers,\n            credentials: \"include\"\n        };\n        if (data) {\n            if (isFormData || data instanceof FormData) {\n                config.body = data instanceof FormData ? data : new FormData(data);\n            } else {\n                config.body = JSON.stringify(data);\n            }\n        }\n        // Request interceptor - log outgoing request\n        console.log(\"\\uD83D\\uDE80 API Request:\", {\n            method,\n            url,\n            headers: Object.fromEntries(Object.entries(headers).filter((param)=>{\n                let [k] = param;\n                return k !== \"Authorization\";\n            })),\n            body: data ? isFormData || data instanceof FormData ? \"[FormData]\" : data : undefined,\n            timestamp: new Date().toISOString()\n        });\n        try {\n            const response = await fetch(url, config);\n            const responseData = await this.handleResponse(response);\n            // Response interceptor - log successful response\n            console.log(\"âœ… API Response:\", {\n                method,\n                url,\n                status: response.status,\n                statusText: response.statusText,\n                timestamp: new Date().toISOString()\n            });\n            return {\n                data: responseData\n            };\n        } catch (error) {\n            if (error instanceof ApiError) {\n                return {\n                    error: {\n                        message: error.message,\n                        code: error.code || \"unknown_error\",\n                        details: error.details\n                    }\n                };\n            }\n            return {\n                error: {\n                    message: error instanceof Error ? error.message : \"An unknown error occurred\",\n                    code: \"unknown_error\"\n                }\n            };\n        }\n    }\n    async handleResponse(response) {\n        const contentType = response.headers.get(\"content-type\");\n        const isJson = contentType === null || contentType === void 0 ? void 0 : contentType.includes(\"application/json\");\n        if (!response.ok) {\n            // Handle 401 Unauthorized globally\n            if (response.status === 401) {\n                // Clear invalid token and redirect to login\n                if (true) {\n                    localStorage.removeItem(\"access_token\");\n                    // Force redirect to login\n                    window.location.href = \"/login\";\n                }\n                throw new ApiError(401, \"Session expired. Please log in again.\", \"auth_expired\");\n            }\n            let errorMessage = \"HTTP error! status: \".concat(response.status);\n            let errorCode = \"unknown_error\";\n            let errorDetails;\n            try {\n                if (isJson) {\n                    const errorData = await response.json();\n                    // Special handling for 422 errors - log full response for debugging\n                    if (response.status === 422) {\n                        console.error(\"422 Unprocessable Entity Error Details:\", {\n                            status: response.status,\n                            statusText: response.statusText,\n                            url: response.url,\n                            fullErrorResponse: errorData,\n                            timestamp: new Date().toISOString()\n                        });\n                    }\n                    if (errorData.success === false && errorData.error) {\n                        errorMessage = errorData.error.message;\n                        errorCode = errorData.error.code;\n                        errorDetails = errorData.error.details;\n                    } else {\n                        // Fallback for non-standard error format\n                        errorMessage = (errorData === null || errorData === void 0 ? void 0 : errorData.detail) || (errorData === null || errorData === void 0 ? void 0 : errorData.message) || errorMessage;\n                    }\n                } else {\n                    errorMessage = await response.text() || response.statusText || errorMessage;\n                }\n            } catch (e) {\n                errorMessage = response.statusText || errorMessage;\n            }\n            throw new ApiError(response.status, errorMessage, errorCode, errorDetails);\n        }\n        if (response.status === 204) {\n            return null;\n        }\n        if (!isJson) {\n            return response.text();\n        }\n        return response.json();\n    }\n    // HTTP method helpers\n    async get(endpoint, params) {\n        const query = new URLSearchParams();\n        if (params) {\n            Object.entries(params).forEach((param)=>{\n                let [key, value] = param;\n                if (value !== undefined && value !== \"\") {\n                    query.append(key, String(value));\n                }\n            });\n        }\n        const queryString = query.toString();\n        const url = queryString ? \"\".concat(endpoint, \"?\").concat(queryString) : endpoint;\n        return this.request(\"GET\", url);\n    }\n    async post(endpoint, data) {\n        let isFormData = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n        return this.request(\"POST\", endpoint, data, isFormData);\n    }\n    async put(endpoint, data) {\n        let isFormData = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n        return this.request(\"PUT\", endpoint, data, isFormData);\n    }\n    async patch(endpoint, data) {\n        let isFormData = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n        return this.request(\"PATCH\", endpoint, data, isFormData);\n    }\n    async delete(endpoint) {\n        return this.request(\"DELETE\", endpoint);\n    }\n    // Auth methods\n    async login(credentials) {\n        return this.post(\"/auth/login\", credentials);\n    }\n    async signup(userData) {\n        return this.post(\"/auth/signup\", userData);\n    }\n    async verifyEmail(data) {\n        return this.post(\"/auth/verify-email\", data);\n    }\n    // User methods\n    async getCurrentUser() {\n        return this.get(\"/auth/users/me\");\n    }\n    // Catalog methods\n    async getCatalogItems(params) {\n        return this.get(\"/catalog/\", params);\n    }\n    async createCatalogItem(data) {\n        return this.post(\"/catalog/\", data);\n    }\n    async getCatalogItem(itemId) {\n        return this.get(\"/catalog/\".concat(itemId));\n    }\n    async updateCatalogItem(itemId, data) {\n        return this.put(\"/catalog/\".concat(itemId), data);\n    }\n    async deleteCatalogItem(itemId) {\n        return this.delete(\"/catalog/\".concat(itemId));\n    }\n    // Upload catalog image\n    async uploadCatalogImage(file) {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        return this.post(\"/catalog/upload-image\", formData, true);\n    }\n    // Knowledge Base methods\n    async getKnowledgeBaseEntries(params) {\n        return this.get(\"/knowledge_base/\", params);\n    }\n    async createKnowledgeBaseItem(data) {\n        return this.post(\"/knowledge_base/\", data);\n    }\n    async uploadKnowledgeBaseFile(data) {\n        const formData = new FormData();\n        formData.append(\"title\", data.title);\n        if (data.category) formData.append(\"category\", data.category);\n        formData.append(\"file\", data.file);\n        return this.post(\"/knowledge_base/upload\", formData, true);\n    }\n    async getKnowledgeBaseItem(itemId) {\n        return this.get(\"/knowledge_base/\".concat(itemId));\n    }\n    async updateKnowledgeBaseItem(itemId, data) {\n        return this.put(\"/knowledge_base/\".concat(itemId), data);\n    }\n    async deleteKnowledgeBaseItem(itemId) {\n        return this.delete(\"/knowledge_base/\".concat(itemId));\n    }\n    // Chat Agents methods\n    async getChatAgents(params) {\n        return this.get(\"/chat_agents/\", params);\n    }\n    async createChatAgent(data) {\n        // Validate required fields before sending\n        const validation = this.validateChatAgentData(data);\n        if (!validation.isValid) {\n            return {\n                error: {\n                    message: \"Validation failed: \" + validation.errors.join(\", \"),\n                    code: \"validation_error\",\n                    details: validation.errors.reduce((acc, error, index)=>{\n                        acc[\"field_\".concat(index)] = error;\n                        return acc;\n                    }, {})\n                }\n            };\n        }\n        return this.post(\"/chat_agents/\", data);\n    }\n    async getChatAgent(agentId) {\n        return this.get(\"/chat_agents/\".concat(agentId));\n    }\n    async updateChatAgent(agentId, data) {\n        return this.put(\"/chat_agents/\".concat(agentId), data);\n    }\n    async deleteChatAgent(agentId) {\n        return this.delete(\"/chat_agents/\".concat(agentId));\n    }\n    // Business Integrations methods\n    async getBusinessIntegrations() {\n        return this.get(\"/business_integrations/\");\n    }\n    async createBusinessIntegration(data) {\n        return this.post(\"/business_integrations/\", data);\n    }\n    async updateBusinessIntegration(integrationId, data) {\n        return this.put(\"/business_integrations/\".concat(integrationId), data);\n    }\n    async deleteBusinessIntegration(integrationId) {\n        return this.delete(\"/business_integrations/\".concat(integrationId));\n    }\n    // Contacts methods\n    async getContacts(params) {\n        return this.get(\"/contacts/\", params);\n    }\n    async createContact(data) {\n        return this.post(\"/contacts/\", data);\n    }\n    async getContact(contactId) {\n        return this.get(\"/contacts/\".concat(contactId));\n    }\n    async updateContact(contactId, data) {\n        return this.put(\"/contacts/\".concat(contactId), data);\n    }\n    async deleteContact(contactId) {\n        return this.delete(\"/contacts/\".concat(contactId));\n    }\n    // Leads methods\n    async getLeads(params) {\n        return this.get(\"/leads/\", params);\n    }\n    async createLead(data) {\n        return this.post(\"/leads/\", data);\n    }\n    async getLead(leadId) {\n        return this.get(\"/leads/\".concat(leadId));\n    }\n    async updateLead(leadId, data) {\n        return this.put(\"/leads/\".concat(leadId), data);\n    }\n    async deleteLead(leadId) {\n        return this.delete(\"/leads/\".concat(leadId));\n    }\n    // Orders methods\n    async getOrders(params) {\n        return this.get(\"/orders/\", params);\n    }\n    async createOrder(data) {\n        return this.post(\"/orders/\", data);\n    }\n    async getOrder(orderId) {\n        return this.get(\"/orders/\".concat(orderId));\n    }\n    async updateOrder(orderId, data) {\n        return this.put(\"/orders/\".concat(orderId), data);\n    }\n    async deleteOrder(orderId) {\n        return this.delete(\"/orders/\".concat(orderId));\n    }\n    // Appointments methods\n    async getAppointments(params) {\n        return this.get(\"/appointments/\", params);\n    }\n    async createAppointment(data) {\n        return this.post(\"/appointments/\", data);\n    }\n    async getAppointment(appointmentId) {\n        return this.get(\"/appointments/\".concat(appointmentId));\n    }\n    async updateAppointment(appointmentId, data) {\n        return this.put(\"/appointments/\".concat(appointmentId), data);\n    }\n    async deleteAppointment(appointmentId) {\n        return this.delete(\"/appointments/\".concat(appointmentId));\n    }\n    // Conversations methods\n    async getConversations(params) {\n        return this.get(\"/convos/\", params);\n    }\n    async getConversation(conversationId) {\n        return this.get(\"/convos/convo/\".concat(conversationId));\n    }\n    async getConversationMessages(conversationId, params) {\n        return this.get(\"/convos/\".concat(conversationId, \"/messages\"), params);\n    }\n    async sendConversationMessage(conversationId, data) {\n        return this.post(\"/convos/\".concat(conversationId, \"/messages\"), data);\n    }\n    async updateConversationMode(conversationId, mode) {\n        return this.put(\"/convos/\".concat(conversationId, \"/mode\"), {\n            mode\n        });\n    }\n    async updateConversationSummary(conversationId, summary) {\n        return this.put(\"/convos/\".concat(conversationId, \"/summary\"), {\n            summary\n        });\n    }\n    // Chat Agent Configuration methods\n    async getChatAgentConfig(agentId) {\n        return this.get(\"/chat-agents/\".concat(agentId, \"/config\"));\n    }\n    async updateChatAgentConfig(agentId, data) {\n        return this.put(\"/chat-agents/\".concat(agentId, \"/config\"), data);\n    }\n    async validateChatAgentConfig(agentId, data) {\n        return this.post(\"/chat-agents/\".concat(agentId, \"/config/validate\"), data);\n    }\n    // Chat Agent Knowledge Base linking\n    async linkKnowledgeBaseToAgent(agentId, knowledgeBaseIds) {\n        return this.post(\"/chat_agent_knowledge_base/\", {\n            chat_agent_id: agentId,\n            knowledge_base_ids: knowledgeBaseIds\n        });\n    }\n    async unlinkKnowledgeBaseFromAgent(agentId, knowledgeBaseId) {\n        return this.delete(\"/chat_agent_knowledge_base/\".concat(agentId, \"/\").concat(knowledgeBaseId));\n    }\n    async getAgentKnowledgeBases(agentId) {\n        return this.get(\"/chat_agent_knowledge_base/\".concat(agentId));\n    }\n    // Chat Agent testing (for future implementation)\n    async testChatAgentMessage(agentId, message) {\n        return this.post(\"/chat-agents/\".concat(agentId, \"/test-message\"), {\n            message\n        });\n    }\n    // WebSocket connection for real-time chat (placeholder for future implementation)\n    connectWebSocket(agentId, conversationId) {\n        const wsUrl = \"ws://localhost:8000/ws\" || 0;\n        return new WebSocket(\"\".concat(wsUrl, \"/chat-agents/\").concat(agentId, \"/conversations/\").concat(conversationId));\n    }\n    // Validation methods\n    validateChatAgentData(data) {\n        const errors = [];\n        // Required fields\n        if (!data.name || typeof data.name !== \"string\" || data.name.trim().length < 3) {\n            errors.push(\"Name is required and must be at least 3 characters\");\n        }\n        if (data.name && data.name.length > 50) {\n            errors.push(\"Name must be no more than 50 characters\");\n        }\n        // Optional but validated fields\n        if (data.description && data.description.length > 200) {\n            errors.push(\"Description must be no more than 200 characters\");\n        }\n        if (data.role && typeof data.role !== \"string\") {\n            errors.push(\"Role must be a string\");\n        }\n        if (data.active !== undefined && typeof data.active !== \"boolean\") {\n            errors.push(\"Active must be a boolean\");\n        }\n        if (data.channels && typeof data.channels !== \"object\") {\n            errors.push(\"Channels must be an object\");\n        }\n        return {\n            isValid: errors.length === 0,\n            errors\n        };\n    }\n}\nconst apiClient = new ApiClient();\n// Utility function for consistent error handling across components\nfunction parseApiError(error) {\n    // Handle ApiError instances from our API client\n    if (error instanceof ApiError) {\n        return {\n            message: error.message,\n            code: error.code,\n            details: error.details\n        };\n    }\n    // Handle standard Error objects\n    if (error instanceof Error) {\n        return {\n            message: error.message,\n            code: \"unknown_error\"\n        };\n    }\n    // Handle API response objects with error structure\n    if (error && typeof error === \"object\" && error.error) {\n        return {\n            message: error.error.message || \"An error occurred\",\n            code: error.error.code || \"unknown_error\",\n            details: error.error.details\n        };\n    }\n    // Handle network or other errors\n    if (error && typeof error === \"object\") {\n        return {\n            message: error.message || \"An unknown error occurred\",\n            code: \"network_error\"\n        };\n    }\n    // Fallback for unknown error types\n    return {\n        message: \"An unexpected error occurred. Please try again.\",\n        code: \"unknown_error\"\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/apiClient.ts\n"));

/***/ })

});